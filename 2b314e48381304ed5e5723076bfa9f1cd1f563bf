{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5a2d38f1_7e3f94fe",
        "filename": "meson.build",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-09-30T15:06:34Z",
      "side": 1,
      "message": "why is this target named if it\u0027s not subsequently used",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 3
      },
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b93358ab_1bd9afd8",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-09-30T15:06:34Z",
      "side": 1,
      "message": "static variable makes code less testable. What about creating a class to hold these variables.",
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2ee3a0d_bcb7b750",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-09-30T22:19:33Z",
      "side": 1,
      "message": "These are global to the system (because you can only have one line holder at a time) hence the global.\n\nHow would you imagine testing GPIOs?",
      "parentUuid": "b93358ab_1bd9afd8",
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26223b0b_14e07c83",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-09-30T15:06:34Z",
      "side": 1,
      "message": "phosphor-logging?\n\nHow are we going to get debug level logs and warnings with this approach?",
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9579772_2230d8e8",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-09-30T22:19:33Z",
      "side": 1,
      "message": "Or possibly just std::print.  These aren\u0027t intended to be platform level logs, only debug diagnostics.",
      "parentUuid": "26223b0b_14e07c83",
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14a96d0b_adefe50c",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-09-30T15:06:34Z",
      "side": 1,
      "message": "should an error value be returned here?",
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6299f54b_3cd25161",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-09-30T22:19:33Z",
      "side": 1,
      "message": "Probably. I think this function has changed on master since.",
      "parentUuid": "14a96d0b_adefe50c",
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "249a49c9_d5f9b3ff",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-09-30T15:06:34Z",
      "side": 1,
      "message": "`Settingto` is not a word",
      "range": {
        "startLine": 76,
        "startChar": 33,
        "endLine": 76,
        "endChar": 42
      },
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fa8e3af_8b594879",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-09-30T22:19:33Z",
      "side": 1,
      "message": "Agreed.  Can fix in next commit.",
      "parentUuid": "249a49c9_d5f9b3ff",
      "range": {
        "startLine": 76,
        "startChar": 33,
        "endLine": 76,
        "endChar": 42
      },
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df51ac29_3daa17e5",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 128,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-09-30T15:06:34Z",
      "side": 1,
      "message": "```suggestion\n        const int val \u003d line.get_value();\n```",
      "range": {
        "startLine": 128,
        "startChar": 8,
        "endLine": 128,
        "endChar": 35
      },
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33266bcf_8c4634bf",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 128,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-09-30T22:19:33Z",
      "side": 1,
      "message": "I\u0027m going to assume this is a nit? I don\u0027t know of anything in cppcoreguidelines that would enforce stack variables being const.",
      "parentUuid": "df51ac29_3daa17e5",
      "range": {
        "startLine": 128,
        "startChar": 8,
        "endLine": 128,
        "endChar": 35
      },
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50235b35_7c38f387",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 155,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-09-30T15:06:34Z",
      "side": 1,
      "message": "`\"Line {} Asserted\\n\"` to make it consistent with the log on line 143",
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccd22cc6_db08effe",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 155,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-09-30T22:19:33Z",
      "side": 1,
      "message": "üëç",
      "parentUuid": "50235b35_7c38f387",
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51c1ba9e_3d079fbd",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 172,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-09-30T15:06:34Z",
      "side": 1,
      "message": "function should return error code or something here",
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b1567b2_aaefa8f4",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 172,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-09-30T22:19:33Z",
      "side": 1,
      "message": "The intent is that the operations continue.  Returning an error code would defeat that.",
      "parentUuid": "51c1ba9e_3d079fbd",
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa9f3ccd_26b9d5bd",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 192,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-09-30T15:06:34Z",
      "side": 1,
      "message": "This is worded exactly reverse from line 233 where it says\n\n`std::cerr \u003c\u003c std::format(\"attempting to open {}\", path);`\n\nLet\u0027s be consistent if the path goes first or later as part of an error message.",
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7517b9f_e8e61686",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 192,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-09-30T22:19:33Z",
      "side": 1,
      "message": "Happy to accept a patch if you want to make that level of consistency in debug logging.... but this is debug logging, so far less important than function.",
      "parentUuid": "aa9f3ccd_26b9d5bd",
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc42c99c_a765eb78",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 241,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-09-30T15:06:34Z",
      "side": 1,
      "message": "https://en.cppreference.com/w/cpp/io/basic_ofstream.html\n\n\u003e (destructor)\n[virtual] (implicitly declared)\n\tdestructs the basic_ofstream and the associated buffer, closes the file\n(virtual public member function)\n\nDo we need to close all these files manually?",
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a679ed6_38fa8453",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 241,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-09-30T22:19:33Z",
      "side": 1,
      "message": "Nope, could be fixed.  I don\u0027t think it hurts anything though.",
      "parentUuid": "dc42c99c_a765eb78",
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8f30457_2b042a70",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 253,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-09-30T15:06:34Z",
      "side": 1,
      "message": "if the path does not exist, where are we breaking out of this loop?\n\ninfinite loop?",
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e35f964_3c1e2b8d",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 253,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-09-30T22:19:33Z",
      "side": 1,
      "message": "Someone already pointed this out, and I think it\u0027s fixed on master.",
      "parentUuid": "e8f30457_2b042a70",
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f4378b2_4c5f205e",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 316,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-09-30T15:06:34Z",
      "side": 1,
      "message": "This path literal should probably be constructed instead of hardcoding. Duplication of the prefix from line 271.\n\nWe are hardcoding linux specifics here. `hmc_is_present` could instead call something like `check_i2c_device_present`.",
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1585ef8a_c3c7b3af",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 316,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-09-30T22:19:33Z",
      "side": 1,
      "message": "\u003e We are hardcoding linux specifics here\n\nI\u0027m not sure why that\u0027s a problem?\n\nhmc_is_present is more descriptive, but yes, internally it could check a helper like check_i2c_device_present",
      "parentUuid": "4f4378b2_4c5f205e",
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4da9145_a8f4d40f",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 327,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-09-30T15:06:34Z",
      "side": 1,
      "message": "This is the same branch as line 319. Why are we creating another block for this code path.",
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cfa2504_7ce3b1c0",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 327,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-09-30T22:19:33Z",
      "side": 1,
      "message": "Somewhat clarity, but sure, we could code gold this a bit.",
      "parentUuid": "c4da9145_a8f4d40f",
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cacb078_a43bd132",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 380,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-09-30T15:06:34Z",
      "side": 1,
      "message": "Why did we merge this commented out code.",
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a55c507_e78baf91",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 380,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-09-30T22:19:33Z",
      "side": 1,
      "message": "Will fix.",
      "parentUuid": "1cacb078_a43bd132",
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "722ba31c_a6307b27",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 386,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-09-30T15:06:34Z",
      "side": 1,
      "message": "Why did we merge the commented out code.\n\nIf there is a strict init mode for fail-fast why not create an option for that.",
      "range": {
        "startLine": 386,
        "startChar": 8,
        "endLine": 386,
        "endChar": 31
      },
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ab3fda2_f475edb3",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 386,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-09-30T22:19:33Z",
      "side": 1,
      "message": "These were part of the final patch which requested we break out the multiple systems into their own functions, and this got missed.  You\u0027re right, these should still do something.",
      "parentUuid": "722ba31c_a6307b27",
      "range": {
        "startLine": 386,
        "startChar": 8,
        "endLine": 386,
        "endChar": 31
      },
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fdbe37f_c03da6ce",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 391,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-09-30T15:06:34Z",
      "side": 1,
      "message": "This function has a failure mode but does not return an error.",
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f537636_f17dfe06",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 391,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-09-30T22:19:33Z",
      "side": 1,
      "message": "Correct, that is the intent.  The goal is to init as much as possible without stopping.  If this bus fails to init, only that bus will be broken.  If we throw an error here, all further functions will be broken.",
      "parentUuid": "6fdbe37f_c03da6ce",
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a98ca96_9a82685e",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 459,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-09-30T15:06:34Z",
      "side": 1,
      "message": "`std::endl` ?",
      "range": {
        "startLine": 459,
        "startChar": 40,
        "endLine": 459,
        "endChar": 46
      },
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa5b3cc1_e4852f69",
        "filename": "platform.cpp",
        "patchSetId": 4
      },
      "lineNbr": 459,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-09-30T22:19:33Z",
      "side": 1,
      "message": "I don\u0027t think we need to force a flush here, do we?",
      "parentUuid": "5a98ca96_9a82685e",
      "range": {
        "startLine": 459,
        "startChar": 40,
        "endLine": 459,
        "endChar": 46
      },
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8e82132_27bb950e",
        "filename": "subprojects/libgpiod.wrap",
        "patchSetId": 4
      },
      "lineNbr": 2,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-09-30T15:06:34Z",
      "side": 1,
      "message": "not sure about this one, but was it an option to use the newer libgpiod 2.2.x ?",
      "revId": "2b314e48381304ed5e5723076bfa9f1cd1f563bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}